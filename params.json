{"name":"Data-management-and-visualization3","tagline":"Data Management and Visualization - 3rd assignment","body":"## Third assignment\r\n\r\nMy dataset is the Gapminder dataset. \r\nMy codebook:\r\n* femaleemployrate: (2007) female employees age 15+ (% of the population). Percentage of female population, age above 15, that has been employed during the given year.\r\n* employrate: (2007) total employees age 15+ (% of the population). Percentage of total population, age above 15, that has been employed during the given year.\r\n* lifeexpectancy 2011 life expectancy at birth (years). The average number of years a newborn child would live if current mortality patterns were to stay the same.\r\n* urbanrate (2008) urban population (% of total). Urban population refers to people living in urban areas as defined by national statistical offices (calculated using World Bank population estimates and urban ratios from the United Nations World Urbanization Prospects).\r\n\r\nThis assigmnet is about datamanagement. My dataset contains only continous variables, there are no categorical variable, which makes this job a little harder. There is no missing data and nan data in these set, so I could not use any methodology to solve such a problem. So I tried to subsetting my data and analyse it.\r\n\r\n### Code\r\n`import pandas\r\nimport numpy\r\n\r\npandas.options.display.float_format = '{:,.2f}'.format\r\ndata = pandas.read_csv('C:\\Users\\Ajna\\Downloads\\gapminder.csv', low_memory = False)\r\ndata_columns = map(str.lower, data.columns)\r\n\r\n#setting variables you will be working with to numeric\r\n\r\ndata['femaleemployrate'] = data['femaleemployrate'].convert_objects(convert_numeric=True)\r\ndata['employrate'] = data['employrate'].convert_objects(convert_numeric=True)\r\ndata['lifeexpectancy'] = data['lifeexpectancy'].convert_objects(convert_numeric=True)\r\ndata['urbanrate'] = data['urbanrate'].convert_objects(convert_numeric=True)\r\n\r\n#frequency counts\r\ndata1 = data.copy()\r\ndata1['lifeexpectancy_range'] = pandas.cut(data1.lifeexpectancy, range(0,110, 10))\r\nle = data1['lifeexpectancy_range'].value_counts(sort = False, normalize = True)\r\n\r\ndata1['femaleemployrate_range'] = pandas.cut(data1.femaleemployrate, range(0,110, 10))\r\nfe = data1['femaleemployrate_range'].value_counts(sort= False, normalize= True)\r\n\r\ndata1['employrate_range']= pandas.cut(data1.employrate, range(0,110, 10))\r\nem = data1['employrate_range'].value_counts(sort= False,normalize = True)\r\n\r\ndata1['urbanrate_range']= pandas.cut(data1.urbanrate, range(0,110, 10))\r\nur = data1['urbanrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nresult =result3 = pandas.concat([le, fe, em, ur], axis=1, join='inner') \r\n\r\nsub2 = data[data['lifeexpectancy']>= 70]\r\nsub3 = sub2.copy()\r\nsub3 = sub3[['femaleemployrate','employrate', 'urbanrate', 'lifeexpectancy']]\r\n\r\nsub3['lifeexpectancy_range'] = pandas.cut(sub3.lifeexpectancy, range(0,110, 10))\r\nle3 = sub3['lifeexpectancy_range'].value_counts(sort = False, normalize = True)\r\n\r\nsub3['femaleemployrate_range'] = pandas.cut(sub3.femaleemployrate, range(0,110, 10))\r\nfe3 = sub3['femaleemployrate_range'].value_counts(sort= False, normalize= True)\r\n\r\nsub3['employrate_range']= pandas.cut(sub3.employrate, range(0,110, 10))\r\nem3 = sub3['employrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nsub3['urbanrate_range']= pandas.cut(sub3.urbanrate, range(0,110, 10))\r\nur3 = sub3['urbanrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nresult3 = pandas.concat([le3, fe3, em3, ur3], axis=1, join='inner')\r\n\r\n\r\n\r\nsub4 = data[data['urbanrate']>= 60]\r\n\r\nsub4['lifeexpectancy_range'] = pandas.cut(sub4.lifeexpectancy, range(0,110, 10))\r\nle4 = sub4['lifeexpectancy_range'].value_counts(sort = False, normalize = True)\r\n\r\nsub4['femaleemployrate_range'] = pandas.cut(sub4.femaleemployrate, range(0,110, 10))\r\nfe4 = sub4['femaleemployrate_range'].value_counts(sort= False, normalize= True)\r\n\r\nsub4['employrate_range']= pandas.cut(sub4.employrate, range(0,110, 10))\r\nem4 = sub4['employrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nsub4['urbanrate_range']= pandas.cut(sub4.urbanrate, range(0,110, 10))\r\nur4 = sub4['urbanrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nresult4 = pandas.concat([le4, fe4, em4, ur4], axis=1, join='inner')\r\n\r\n\r\n\r\nsub5 = data[data['femaleemployrate']>= 50]\r\n\r\nsub5['lifeexpectancy_range'] = pandas.cut(sub5.lifeexpectancy, range(0,110, 10))\r\nle5 = sub5['lifeexpectancy_range'].value_counts(sort = False, normalize = True)\r\n\r\nsub5['femaleemployrate_range'] = pandas.cut(sub5.femaleemployrate, range(0,110, 10))\r\nfe5 = sub5['femaleemployrate_range'].value_counts(sort= False, normalize= True)\r\n\r\nsub5['employrate_range']= pandas.cut(sub5.employrate, range(0,110, 10))\r\nem5 = sub5['employrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nsub5['urbanrate_range']= pandas.cut(sub5.urbanrate, range(0,110, 10))\r\nur5 = sub5['urbanrate_range'].value_counts(sort= False,normalize = True)\r\n\r\nresult5 = pandas.concat([le5, fe5, em5, ur5], axis=1, join='inner')\r\n\r\nprint \"\"\r\nprint '0: life expectancy, 1: female employrate, 2: employrate, 3: urbanrate'\r\nprint \"\"\r\nprint \"Original frequency tables\"\r\nprint result\r\nprint \"\"\r\nprint \"Life expectancy more than 70 years\"\r\nprint result3\r\nprint \"\"\r\nprint \"Urbanrate more than 60%\"\r\nprint result4 \r\nprint \"\"\r\nprint \"Female employrate more than 50%\"\r\nprint result5`\r\n\r\n###Results:\r\n[Frequency tables](https://drive.google.com/open?id=0B9RU8CIct6N8ZjUxRHd2SzNRa28)\r\n\r\n###Evaluation:\r\n* Life expectancy more than 70 years\r\nI have chosen 70 years because range between 70-80 years is the most frequent. Between female employrate and life expectancy have no direct connection, there is only a slight difference between the original and subsetted results. There is more effect on the employrate, there is no change in the maximum at 50-60%, but the ratio is changed from 0.31 to 0.40, and the 80-90% range was disappeared, so the conncetion is not linear between the employrate and lifeexpectancy, but this will need more detailed analysis later. But in more urbanised countries usually people live longer, from 60% urbanrate this effect is more obvious.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}